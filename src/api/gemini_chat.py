"""
Enhanced Chat API with Gemini Integration
Real-time chat with Google Gemini AI Agent
"""

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends, HTTPException
from fastapi.responses import StreamingResponse
from typing import Dict, Any, List, Optional
import json
import asyncio
from datetime import datetime
import uuid

from src.api.gemini_config import get_gemini_agent
from src.security.authentication import get_current_user

router = APIRouter()

class GeminiConnectionManager:
    """Manage WebSocket connections for Gemini chat."""
    
    def __init__(self):
        self.active_connections: List[WebSocket] = []
        self.user_sessions: Dict[str, str] = {}  # user_id -> session_id
        self.user_agents: Dict[str, Any] = {}  # user_id -> GeminiAIAgent
    
    async def connect(self, websocket: WebSocket, user_id: str):
        """Connect user to WebSocket."""
        await websocket.accept()
        self.active_connections.append(websocket)
        
        # Create or get session ID
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = str(uuid.uuid4())
        
        # Initialize Gemini agent for user
        agent = await get_gemini_agent(user_id)
        if agent:
            self.user_agents[user_id] = agent
    
    async def disconnect(self, websocket: WebSocket):
        """Disconnect user from WebSocket."""
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        """Send message to specific user."""
        try:
            await websocket.send_text(message)
        except:
            await self.disconnect(websocket)
    
    async def broadcast(self, message: str):
        """Broadcast message to all connected users."""
        for connection in self.active_connections:
            await self.send_personal_message(message, connection)
    
    def get_user_agent(self, user_id: str):
        """Get user's Gemini agent."""
        return self.user_agents.get(user_id)

# Global connection manager
gemini_manager = GeminiConnectionManager()

@router.websocket("/gemini/chat/ws")
async def gemini_websocket_chat_endpoint(websocket: WebSocket, user_id: str = "anonymous"):
    """WebSocket endpoint for real-time Gemini chat."""
    await gemini_manager.connect(websocket, user_id)
    session_id = gemini_manager.user_sessions[user_id]
    
    try:
        # Send welcome message
        await gemini_manager.send_personal_message(
            json.dumps({
                "type": "system",
                "content": "ü§ñ **Ch√†o m·ª´ng ƒë·∫øn v·ªõi OpenManus-Youtu AI Agent!**\n\nT√¥i ƒë∆∞·ª£c t√≠ch h·ª£p v·ªõi Google Gemini v√† c√≥ th·ªÉ gi√∫p b·∫°n:\n\nüîß **C√°c t√≠nh nƒÉng ch√≠nh:**\n‚Ä¢ T·∫°o v√† ki·ªÉm tra CCCD\n‚Ä¢ Tra c·ª©u m√£ s·ªë thu·∫ø\n‚Ä¢ Ph√¢n t√≠ch d·ªØ li·ªáu\n‚Ä¢ Thu th·∫≠p d·ªØ li·ªáu web\n‚Ä¢ T·ª± ƒë·ªông h√≥a form\n‚Ä¢ T·∫°o b√°o c√°o\n‚Ä¢ Xu·∫•t Excel\n\nüí¨ **H√£y th·ª≠:** \"T·∫°o 100 CCCD cho t·ªânh H∆∞ng Y√™n, gi·ªõi t√≠nh n·ªØ, nƒÉm sinh 1965-1975\"",
                "timestamp": datetime.now().isoformat()
            }),
            websocket
        )
        
        while True:
            # Receive message from client
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            user_input = message_data.get("message", "")
            stream = message_data.get("stream", True)
            
            if not user_input.strip():
                continue
            
            # Check if user has Gemini agent configured
            agent = gemini_manager.get_user_agent(user_id)
            if not agent:
                await gemini_manager.send_personal_message(
                    json.dumps({
                        "type": "error",
                        "content": "‚ùå **Ch∆∞a c·∫•u h√¨nh Gemini API**\n\nVui l√≤ng c·∫•u h√¨nh API key c·ªßa Gemini tr∆∞·ªõc khi s·ª≠ d·ª•ng.\n\n1. ƒêi t·ªõi Settings\n2. Nh·∫≠p Gemini API key\n3. Ch·ªçn model v√† c√†i ƒë·∫∑t\n4. Test k·∫øt n·ªëi\n\nSau ƒë√≥ quay l·∫°i ƒë·ªÉ tr√≤ chuy·ªán!",
                        "timestamp": datetime.now().isoformat()
                    }),
                    websocket
                )
                continue
            
            # Send typing indicator
            await gemini_manager.send_personal_message(
                json.dumps({
                    "type": "typing",
                    "message": "ü§ñ Gemini ƒëang suy nghƒ©..."
                }),
                websocket
            )
            
            # Process message with Gemini AI Agent
            response_chunks = []
            
            try:
                async for chunk in agent.process_message(
                    user_input, user_id, session_id, stream=stream
                ):
                    if stream:
                        # Send chunk immediately
                        await gemini_manager.send_personal_message(
                            json.dumps({
                                "type": "chunk",
                                "content": chunk,
                                "timestamp": datetime.now().isoformat()
                            }),
                            websocket
                        )
                    else:
                        response_chunks.append(chunk)
                
                if not stream:
                    # Send complete response
                    complete_response = "".join(response_chunks)
                    await gemini_manager.send_personal_message(
                        json.dumps({
                            "type": "complete",
                            "content": complete_response,
                            "timestamp": datetime.now().isoformat()
                        }),
                        websocket
                    )
                
                # Send completion signal
                await gemini_manager.send_personal_message(
                    json.dumps({
                        "type": "complete",
                        "timestamp": datetime.now().isoformat()
                    }),
                    websocket
                )
                
            except Exception as e:
                await gemini_manager.send_personal_message(
                    json.dumps({
                        "type": "error",
                        "content": f"‚ùå **L·ªói x·ª≠ l√Ω tin nh·∫Øn:**\n\n{str(e)}\n\nVui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra c·∫•u h√¨nh Gemini API."
                    }),
                    websocket
                )
            
    except WebSocketDisconnect:
        gemini_manager.disconnect(websocket)
    except Exception as e:
        await gemini_manager.send_personal_message(
            json.dumps({
                "type": "error",
                "content": f"‚ùå **L·ªói k·∫øt n·ªëi:** {str(e)}"
            }),
            websocket
        )

@router.post("/gemini/chat/message")
async def send_gemini_message(
    message_data: Dict[str, Any],
    current_user = Depends(get_current_user)
):
    """Send message via HTTP API to Gemini."""
    try:
        user_id = str(current_user.id)
        user_input = message_data.get("message", "")
        session_id = message_data.get("session_id", str(uuid.uuid4()))
        stream = message_data.get("stream", False)
        
        if not user_input.strip():
            raise HTTPException(status_code=400, detail="Message cannot be empty")
        
        # Get user's Gemini agent
        agent = await get_gemini_agent(user_id)
        if not agent:
            raise HTTPException(
                status_code=400, 
                detail="Gemini API not configured. Please configure your Gemini API key first."
            )
        
        if stream:
            # Return streaming response
            async def generate_response():
                try:
                    async for chunk in agent.process_message(
                        user_input, user_id, session_id, stream=True
                    ):
                        yield f"data: {json.dumps({'content': chunk})}\n\n"
                    yield "data: [DONE]\n\n"
                except Exception as e:
                    yield f"data: {json.dumps({'error': str(e)})}\n\n"
            
            return StreamingResponse(
                generate_response(),
                media_type="text/plain"
            )
        else:
            # Return complete response
            response_chunks = []
            try:
                async for chunk in agent.process_message(
                    user_input, user_id, session_id, stream=False
                ):
                    response_chunks.append(chunk)
                
                complete_response = "".join(response_chunks)
                
                return {
                    "success": True,
                    "response": complete_response,
                    "session_id": session_id,
                    "ai_provider": "gemini",
                    "timestamp": datetime.now().isoformat()
                }
            except Exception as e:
                raise HTTPException(status_code=500, detail=str(e))
            
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/gemini/chat/sessions")
async def get_gemini_sessions(current_user = Depends(get_current_user)):
    """Get user's Gemini chat sessions."""
    try:
        user_id = str(current_user.id)
        agent = await get_gemini_agent(user_id)
        
        if agent:
            # Get context summary
            context_summary = await agent.context_manager.get_context_summary(
                user_id, "default"
            )
            
            return {
                "success": True,
                "sessions": [context_summary],
                "ai_provider": "gemini",
                "timestamp": datetime.now().isoformat()
            }
        else:
            return {
                "success": False,
                "message": "Gemini AI Agent not configured",
                "timestamp": datetime.now().isoformat()
            }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/gemini/chat/sessions/{session_id}")
async def clear_gemini_session(
    session_id: str,
    current_user = Depends(get_current_user)
):
    """Clear Gemini chat session."""
    try:
        user_id = str(current_user.id)
        agent = await get_gemini_agent(user_id)
        
        if agent:
            await agent.context_manager.clear_context(user_id, session_id)
            
            return {
                "success": True,
                "message": "Gemini session cleared successfully",
                "timestamp": datetime.now().isoformat()
            }
        else:
            raise HTTPException(
                status_code=400,
                detail="Gemini AI Agent not configured"
            )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/gemini/chat/capabilities")
async def get_gemini_capabilities():
    """Get Gemini AI Agent capabilities."""
    return {
        "success": True,
        "ai_provider": "gemini",
        "capabilities": {
            "cccd_generation": {
                "name": "T·∫°o CCCD",
                "description": "T·∫°o CCCD theo t·ªânh, gi·ªõi t√≠nh, nƒÉm sinh",
                "parameters": ["province", "gender", "quantity", "birth_year_range"],
                "example": "T·∫°o 100 CCCD cho t·ªânh H∆∞ng Y√™n, gi·ªõi t√≠nh n·ªØ, nƒÉm sinh 1965-1975"
            },
            "cccd_check": {
                "name": "Ki·ªÉm tra CCCD",
                "description": "Ki·ªÉm tra th√¥ng tin CCCD",
                "parameters": ["cccd_number"],
                "example": "Ki·ªÉm tra CCCD 031089011929"
            },
            "tax_lookup": {
                "name": "Tra c·ª©u m√£ s·ªë thu·∫ø",
                "description": "Tra c·ª©u th√¥ng tin m√£ s·ªë thu·∫ø",
                "parameters": ["tax_code"],
                "example": "Tra c·ª©u m√£ s·ªë thu·∫ø 037178000015"
            },
            "data_analysis": {
                "name": "Ph√¢n t√≠ch d·ªØ li·ªáu",
                "description": "Ph√¢n t√≠ch v√† x·ª≠ l√Ω d·ªØ li·ªáu",
                "parameters": ["analysis_type", "input_data"],
                "example": "Ph√¢n t√≠ch d·ªØ li·ªáu th·ªëng k√™ t·ª´ file CSV"
            },
            "web_scraping": {
                "name": "Thu th·∫≠p d·ªØ li·ªáu web",
                "description": "Scraping d·ªØ li·ªáu t·ª´ website",
                "parameters": ["target_url", "scraping_config"],
                "example": "Thu th·∫≠p d·ªØ li·ªáu t·ª´ website abc.com"
            },
            "form_automation": {
                "name": "T·ª± ƒë·ªông h√≥a form",
                "description": "T·ª± ƒë·ªông ƒëi·ªÅn v√† submit form",
                "parameters": ["form_url", "form_data"],
                "example": "T·ª± ƒë·ªông ƒëi·ªÅn form ƒëƒÉng k√Ω"
            },
            "report_generation": {
                "name": "T·∫°o b√°o c√°o",
                "description": "T·∫°o b√°o c√°o t·ª´ d·ªØ li·ªáu",
                "parameters": ["report_type", "report_data"],
                "example": "T·∫°o b√°o c√°o t·ªïng h·ª£p d·ªØ li·ªáu"
            },
            "excel_export": {
                "name": "Xu·∫•t Excel",
                "description": "Xu·∫•t d·ªØ li·ªáu ra file Excel",
                "parameters": ["export_data"],
                "example": "Xu·∫•t d·ªØ li·ªáu ra file Excel"
            },
            "general_chat": {
                "name": "Tr√≤ chuy·ªán chung",
                "description": "Tr√≤ chuy·ªán v√† h·ªó tr·ª£ th√¥ng tin",
                "parameters": [],
                "example": "H·ªèi v·ªÅ c√°ch s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng"
            }
        },
        "features": [
            "Natural language processing",
            "Function calling",
            "Streaming responses",
            "Context management",
            "Multi-turn conversations",
            "Vietnamese language support"
        ],
        "timestamp": datetime.now().isoformat()
    }