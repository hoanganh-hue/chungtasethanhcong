[project]
name = "openmanus-youtu-unified"
version = "0.1.0"
description = "Unified AI Agent Framework combining OpenManus and Youtu-Agent"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "OpenManus-Youtu Team", email = "team@openmanus-youtu.dev"}
]
license = {text = "MIT"}
keywords = ["ai", "agent", "automation", "browser", "async", "framework"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.10.0",
    "pydantic-settings>=2.0.0",
    
    # Async and HTTP
    "aiohttp>=3.12.0",
    "aiofiles>=24.1.0",
    "httpx>=0.27.0",
    
    # OpenAI Agents (Youtu-Agent foundation)
    "openai>=1.99.0",
    "openai-agents>=0.2.8",
    
    # Browser automation (OpenManus)
    "playwright>=1.51.0",
    "browser-use>=0.1.40",
    "browsergym>=0.13.3",
    
    # Configuration
    "hydra-core>=1.3.2",
    "pyyaml>=6.0.2",
    "toml>=0.10.2",
    
    # Data processing
    "pandas>=2.3.0",
    "numpy>=1.24.0",
    "openpyxl>=3.1.5",
    "matplotlib>=3.10.3",
    "plotly>=5.17.0",
    
    # Web scraping
    "beautifulsoup4>=4.13.3",
    "crawl4ai>=0.6.3",
    "requests>=2.32.3",
    
    # Database and storage
    "sqlmodel>=0.0.24",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.10",
    
    # API and web
    "fastapi>=0.115.0",
    "uvicorn>=0.34.0",
    "websockets>=12.0",
    
    # Utilities
    "rich>=14.1.0",
    "colorlog>=6.9.0",
    "loguru>=0.7.3",
    "tiktoken>=0.9.0",
    "tenacity>=9.0.0",
    
    # MCP (Model Context Protocol)
    "mcp>=1.12.3",
    
    # Docker and deployment
    "docker>=7.1.0",
    
    # Search and research
    "wikipedia-api>=0.8.1",
    "arxiv>=2.2.0",
    "googlesearch-python>=1.3.0",
    "duckduckgo-search>=7.5.3",
    
    # AI/ML
    "google-genai>=1.26.0",
    "huggingface-hub>=0.29.2",
    
    # File processing
    "pillow>=11.1.0",
    "pymupdf>=1.26.3",
    "html2text>=2024.2.26",
]

[dependency-groups]
dev = [
    # Testing
    "pytest>=8.4.0",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    
    # Code quality
    "ruff>=0.12.0",
    "mypy>=1.17.0",
    "pre-commit>=4.3.0",
    "black>=24.0.0",
    
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.6.0",
    "mkdocstrings[python]>=0.30.0",
    
    # Development tools
    "ipython>=9.4.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.6.0",
    "mkdocstrings[python]>=0.30.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

benchmark = [
    "datasets>=3.6.0",
    "arize-phoenix-client>=1.14.0",
    "arize-phoenix-otel>=0.11.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 120
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "D",  # pydocstyle
]
ignore = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
]

[tool.ruff.lint.isort]
known-first-party = ["src"]
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "browser_use.*",
    "browsergym.*",
    "crawl4ai.*",
    "mcp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]